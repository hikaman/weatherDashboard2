# WeatherWise Dashboard: Vibe Coding Implementation Document

## Introduction

This document outlines the development of the **WeatherWise Dashboard**, a login-free weather application built with the latest versions of SvelteKit (using TypeScript), Tailwind CSS, and the Open-Meteo API, with Bun as the package manager. The app displays current weather and a 7-day forecast, providing personalized suggestions for wardrobe, activities, food, and exercises based on weather conditions. Designed for vibe coding with Cursor in agent mode, this document includes a feature list, PRD, task list with TypeScript-based prompts, a progress checklist, example prompts and outputs, and references. Load this document into Cursor’s agent prompt to automatically implement tasks until all are complete.

**Development Principles**:
- **Latest Versions**: Use the most recent stable versions of all software, libraries, and packages (e.g., SvelteKit, Tailwind CSS, Vitest) as of May 25, 2025, installed via Bun.
- **TypeScript**: Use TypeScript for type safety, with strict typing and interfaces for all components and stores.
- **Bun Package Manager**: Use Bun for dependency management (e.g., `bun add svelte@latest`, `bun run dev`).
- **Clean Code**: Follow DRY, clear naming, and modular structure, enforced by ESLint and Prettier.
- **Security**: Sanitize inputs, secure API calls, and avoid vulnerabilities (e.g., XSS, insecure storage).
- **Test-Driven Development (TDD)**: Write tests before implementation, ensuring 90%+ coverage with Vitest.
- **Agent Mode**: Cursor’s agent will execute tasks sequentially, generating, testing, and integrating TypeScript code while adhering to these principles.

---

## Feature List

1. **Weather Data Display**
   - Fetch and display current weather and 7-day forecast using Open-Meteo API based on user’s location or searched city.
   - Show temperature, humidity, wind speed, precipitation, and weather conditions (e.g., clear, cloudy).

2. **Suggestion Engine**
   - Suggest wardrobe items (e.g., umbrella for rain, shorts for warm days).
   - Recommend activities (e.g., picnic for sunny days, board games for rain).
   - Suggest food (e.g., hearty stew for cold days, smoothies for hot days).
   - Propose exercises (e.g., outdoor jogging for clear weather, indoor stretching for rain).

3. **User Interface**
   - Responsive dashboard with Tailwind CSS styling for weather and suggestions.
   - Search bar for city selection with autocomplete support.
   - Filters to toggle suggestion types (wardrobe, activities, food, exercises).
   - Animated weather icons for intuitive display.

4. **Data Management**
   - Store last searched city in localStorage with secure serialization.
   - Cache weather data locally for offline access.

5. **Additional Features**
   - Light/dark mode toggle with user preference persistence.
   - Weather alerts for extreme conditions (e.g., heavy rain, high winds).

---

## Product Requirements Document (PRD)

### Introduction
- **Project Name**: WeatherWise Dashboard
- **Purpose**: Deliver a secure, login-free weather dashboard with personalized lifestyle suggestions based on Open-Meteo API data, built with the latest SvelteKit (TypeScript), Tailwind CSS, and managed with Bun.

### Objectives
- Provide a responsive, type-safe user experience with real-time weather and tailored suggestions.
- Ensure data persistence using secure localStorage, avoiding user accounts.
- Maintain clean, testable, and secure TypeScript code with TDD.

### Target Audience
- General users (students, professionals, outdoor enthusiasts) seeking weather-driven recommendations.

### Features
1. **Weather Data Display**
   - Fetch real-time weather data using Open-Meteo API (no API key required).
   - Display current weather (temperature, humidity, wind speed, precipitation, conditions) and 7-day forecast.
   - Support geolocation or city search with input sanitization.

2. **Suggestion Engine**
   - Wardrobe: Suggest clothing based on temperature and precipitation (e.g., “raincoat” for rain, “t-shirt” for >25°C).
   - Activities: Recommend activities (e.g., “hiking” for sunny, “museum visit” for rain).
   - Food: Propose meals (e.g., “hot soup” for cold, “fruit salad” for hot).
   - Exercises: Suggest exercises (e.g., “cycling” for clear, “yoga” for rain).

3. **User Interface**
   - Responsive Tailwind CSS grid layout for weather and suggestions.
   - City search bar with Open-Meteo geocoding API autocomplete, sanitized inputs.
   - Toggle filters for suggestion categories with accessible controls.
   - Animated weather icons (e.g., Tailwind CSS animations or Skycons).

4. **Data Management**
   - Store last searched city in localStorage with secure JSON serialization.
   - Cache weather data locally for offline access, refreshing when online.

5. **Additional Features**
   - Light/dark mode toggle with localStorage persistence.
   - Alerts for extreme weather (e.g., precipitation > 10 mm/h, wind speed > 50 km/h).

### Technical Requirements
- **Frontend**: Latest SvelteKit with TypeScript for type-safe UI, latest Tailwind CSS for styling.
- **API**: Open-Meteo for weather and geocoding (latest endpoints).
- **Storage**: Browser localStorage with secure practices.
- **Testing**: Latest Vitest for unit/integration tests, Playwright for end-to-end tests.
- **Package Manager**: Bun for dependency management and scripts.
- **Tools**: Cursor (agent mode), latest Vite for project setup.
- **Security**: Sanitize all user inputs, secure API calls, and validate data.

### Non-Requirements
- No user authentication.
- No server-side backend (client-side with API calls).

---

## Task List with Progress Checklist and Example Prompts

The task list is designed for Cursor’s agent mode, with each task including a detailed TypeScript-based prompt, expected output, example prompt with sample TypeScript output, and a checkbox for progress tracking. Tasks are small, sequential, and TDD-driven to ensure clean, secure, and tested code. The agent will use Bun to install the **latest versions** of all dependencies (e.g., `bun add svelte@latest`), and TypeScript ensures type safety with strict typing.

| Task # | Description | Prompt | Expected Output | Example Prompt and Output | Status |
|--------|-------------|--------|-----------------|---------------------------|--------|
| 1 | **Set Up Project Structure** | Initialize a SvelteKit project with the latest Vite and SvelteKit versions, configured for TypeScript. Use Bun to install the latest Tailwind CSS, Vitest, ESLint, and Prettier. Create folders: `src/components`, `src/stores`, `src/utils`. Set up `App.svelte` with a header and main section, styled with Tailwind CSS. Write Vitest unit tests for `App.svelte`. Ensure clean, type-safe code with ESLint and Prettier. | SvelteKit project with TypeScript, Tailwind CSS, `App.svelte` displaying a styled header/main, passing unit tests, linted/formatted code. | **Example Prompt**: "Initialize a SvelteKit project with Vite and TypeScript using Bun. Add Tailwind CSS, Vitest, ESLint, Prettier. Create `App.svelte` with a header. Write a Vitest test to check header rendering." <br> **Sample Output**: <br> ```svelte<br><!-- src/App.svelte --><br><script lang="ts"><br>  let title: string = "WeatherWise";<br></script><br><header class="bg-blue-600 p-4 text-white"><br>  <h1 class="text-2xl">{title}</h1><br></header><br><main class="p-4"><br>  <slot /><br></main><br>```<br>```typescript<br>// tests/App.test.ts<br>import { render, screen } from '@testing-library/svelte';<br>import App from '../src/App.svelte';<br>describe('App', () => {<br>  it('renders header', () => {<br>    render(App);<br>    expect(screen.getByText('WeatherWise')).toBeInTheDocument();<br>  });<br>});<br>```<br>```json<br>// package.json<br>{<br>  "scripts": {<br>    "dev": "bun run vite dev",<br>    "test": "bun run vitest run",<br>    "lint": "bun run eslint .",<br>    "format": "bun run prettier --write ."<br>  }<br>}<br>``` | [ ] |
| 2 | **Fetch Weather Data** | Create a TypeScript Svelte store to fetch current weather and 7-day forecast from the latest Open-Meteo API using latitude/longitude. Define interfaces for weather data. Support geolocation and city queries via Open-Meteo’s geocoding API. Sanitize inputs, handle errors with a fallback message. Write Vitest tests for the store. | Type-safe Svelte store fetching/storing weather data, passing tests, secure input handling. | **Example Prompt**: "Create a TypeScript Svelte store to fetch weather from Open-Meteo API. Define interfaces. Include a test to verify data fetching." <br> **Sample Output**: <br> ```typescript<br>// src/stores/weather.ts<br>import { writable } from 'svelte/store';<br>interface WeatherData {<br>  current_weather: { temperature: number; precipitation: number };<br>}<br>interface WeatherState {<br>  data: WeatherData | null;<br>  error: string | null;<br>}<br>export const weather = writable<WeatherState>({ data: null, error: null });<br>export async function fetchWeather(lat: number, lon: number): Promise<void> {<br>  try {<br>    const url = `https://api.open-meteo.com/v1/forecast?latitude=${lat}&longitude=${lon}&current=temperature_2m,relative_humidity_2m,precipitation,weather_code,wind_speed_10m&daily=temperature_2m_max,temperature_2m_min,precipitation_sum,weather_code`;<br>    const res = await fetch(url);<br>    const data: WeatherData = await res.json();<br>    weather.set({ data, error: null });<br>  } catch {<br>    weather.set({ data: null, error: 'Failed to fetch weather' });<br>  }<br>}<br>```<br>```typescript<br>// tests/weather.test.ts<br>import { weather, fetchWeather } from '../src/stores/weather';<br>import { get } from 'svelte/store';<br>describe('Weather Store', () => {<br>  it('fetches weather data', async () => {<br>    global.fetch = jest.fn().mockResolvedValue({<br>      json: () => ({ current_weather: { temperature: 20 } })<br>    });<br>    await fetchWeather(52.52, 13.41);<br>    expect(get(weather).data?.current_weather.temperature).toBe(20);<br>  });<br>});<br>``` | [ ] |
| 3 | **Display Weather Data** | Build a TypeScript Svelte component to display current weather and 7-day forecast. Use latest Tailwind CSS for a responsive card layout with hover effects. Define props interfaces. Write Vitest tests for rendering and data display. Ensure clean, modular code. | Type-safe weather display component with styled cards, passing tests. | **Example Prompt**: "Create a TypeScript Svelte component to display weather data in a card. Define props interface. Test rendering of temperature." <br> **Sample Output**: <br> ```svelte<br><!-- src/components/WeatherDisplay.svelte --><br><script lang="ts"><br>  import type { WeatherData } from '../stores/weather';<br>  export let weather: WeatherData | null;<br></script><br><div class="grid gap-4 md:grid-cols-2"><br>  <div class="p-4 bg-white shadow rounded-lg hover:shadow-lg"><br>    <h2>Current Weather</h2><br>    <p>Temperature: {weather?.current_weather?.temperature ?? 'N/A'}°C</p><br>  </div><br></div><br>```<br>```typescript<br>// tests/WeatherDisplay.test.ts<br>import { render, screen } from '@testing-library/svelte';<br>import WeatherDisplay from '../src/components/WeatherDisplay.svelte';<br>describe('WeatherDisplay', () => {<br>  it('displays temperature', () => {<br>    render(WeatherDisplay, { weather: { current_weather: { temperature: 20 } } });<br>    expect(screen.getByText('Temperature: 20°C')).toBeInTheDocument();<br>  });<br>});<br>``` | [ ] |
| 4 | **Wardrobe Suggestions** | Create a TypeScript Svelte component with logic to suggest wardrobe items based on Open-Meteo data (e.g., umbrella for precipitation > 0, t-shirt for temperature > 25°C). Define interfaces. Use Tailwind CSS for a grid with icons. Write Vitest tests for suggestion logic. | Type-safe wardrobe suggestion component with tested recommendations. | **Example Prompt**: "Create a TypeScript Svelte component for wardrobe suggestions based on temperature. Define interfaces. Test t-shirt suggestion for >25°C." <br> **Sample Output**: <br> ```svelte<br><!-- src/components/Wardrobe.svelte --><br><script lang="ts"><br>  import type { WeatherData } from '../stores/weather';<br>  export let weather: WeatherData | null;<br>  const getWardrobe = (temp: number | undefined): string[] => <br>    temp && temp > 25 ? ['T-shirt', 'Shorts'] : ['Jacket', 'Jeans'];<br></script><br><div class="grid gap-4"><br>  {#each getWardrobe(weather?.current_weather?.temperature) as item}<br>    <div class="p-2 bg-gray-100 rounded">{item}</div><br>  {/each}<br></div><br>```<br>```typescript<br>// tests/Wardrobe.test.ts<br>import { render, screen } from '@testing-library/svelte';<br>import Wardrobe from '../src/components/Wardrobe.svelte';<br>describe('Wardrobe', () => {<br>  it('suggests t-shirt for warm weather', () => {<br>    render(Wardrobe, { weather: { current_weather: { temperature: 26 } } });<br>    expect(screen.getByText('T-shirt')).toBeInTheDocument();<br>  });<br>});<br>``` | [ ] |
| 5 | **Activity Suggestions** | Add a TypeScript Svelte component to suggest activities based on weather (e.g., picnic for clear skies, board games for precipitation > 0). Define interfaces. Use Tailwind CSS for a list. Write Vitest tests. | Type-safe activity suggestion component with tested logic. | **Example Prompt**: "Create a TypeScript Svelte component for activity suggestions. Define interfaces. Test picnic suggestion for clear weather." <br> **Sample Output**: <br> ```svelte<br><!-- src/components/Activities.svelte --><br><script lang="ts"><br>  import type { WeatherData } from '../stores/weather';<br>  export let weather: WeatherData | null;<br>  const getActivities = (precip: number | undefined): string[] => <br>    precip && precip > 0 ? ['Board Games'] : ['Picnic'];<br></script><br><ul class="list-disc pl-5"><br>  {#each getActivities(weather?.current_weather?.precipitation) as activity}<br>    <li>{activity}</li><br>  {/each}<br></ul><br>```<br>```typescript<br>// tests/Activities.test.ts<br>import { render, screen } from '@testing-library/svelte';<br>import Activities from '../src/components/Activities.svelte';<br>describe('Activities', () => {<br>  it('suggests picnic for clear weather', () => {<br>    render(Activities, { weather: { current_weather: { precipitation: 0 } } });<br>    expect(screen.getByText('Picnic')).toBeInTheDocument();<br>  });<br>});<br>``` | [ ] |
| 6 | **Food Suggestions** | Add a TypeScript Svelte component for food suggestions based on weather (e.g., stew for temperature < 10°C, smoothie for temperature > 25°C). Define interfaces. Use Tailwind CSS for cards. Write Vitest tests. | Type-safe food suggestion component with tested logic. | **Example Prompt**: "Create a TypeScript Svelte component for food suggestions. Define interfaces. Test smoothie suggestion for >25°C." <br> **Sample Output**: <br> ```svelte<br><!-- src/components/Food.svelte --><br><script lang="ts"><br>  import type { WeatherData } from '../stores/weather';<br>  export let weather: WeatherData | null;<br>  const getFood = (temp: number | undefined): string[] => <br>    temp && temp > 25 ? ['Smoothie'] : ['Stew'];<br></script><br><div class="grid gap-4"><br>  {#each getFood(weather?.current_weather?.temperature) as food}<br>    <div class="p-4 bg-white shadow rounded">{food}</div><br>  {/each}<br></div><br>```<br>```typescript<br>// tests/Food.test.ts<br>import { render, screen } from '@testing-library/svelte';<br>import Food from '../src/components/Food.svelte';<br>describe('Food', () => {<br>  it('suggests smoothie for hot weather', () => {<br>    render(Food, { weather: { current_weather: { temperature: 26 } } });<br>    expect(screen.getByText('Smoothie')).toBeInTheDocument();<br>  });<br>});<br>``` | [ ] |
| 7 | **Exercise Suggestions** | Create a TypeScript Svelte component for exercise suggestions based on weather (e.g., jogging for clear skies, yoga for precipitation > 0). Define interfaces. Use Tailwind CSS for bordered cards. Write Vitest tests. | Type-safe exercise suggestion component with tested logic. | **Example Prompt**: "Create a TypeScript Svelte component for exercise suggestions. Define interfaces. Test yoga suggestion for rain." <br> **Sample Output**: <br> ```svelte<br><!-- src/components/Exercises.svelte --><br><script lang="ts"><br>  import type { WeatherData } from '../stores/weather';<br>  export let weather: WeatherData | null;<br>  const getExercises = (precip: number | undefined): string[] => <br>    precip && precip > 0 ? ['Yoga'] : ['Jogging'];<br></script><br><div class="grid gap-4"><br>  {#each getExercises(weather?.current_weather?.precipitation) as exercise}<br>    <div class="p-4 border border-gray-300 rounded">{exercise}</div><br>  {/each}<br></div><br>```<br>```typescript<br>// tests/Exercises.test.ts<br>import { render, screen } from '@testing-library/svelte';<br>import Exercises from '../src/components/Exercises.svelte';<br>describe('Exercises', () => {<br>  it('suggests yoga for rain', () => {<br>    render(Exercises, { weather: { current_weather: { precipitation: 1 } } });<br>    expect(screen.getByText('Yoga')).toBeInTheDocument();<br>  });<br>});<br>``` | [ ] |
| 8 | **Dashboard Layout** | Build a TypeScript Svelte dashboard component with a Tailwind CSS grid layout for weather and suggestion sections. Define props interfaces. Ensure mobile-friendly design. Write Vitest tests for layout rendering. | Type-safe dashboard component with responsive grid, passing tests. | **Example Prompt**: "Create a TypeScript Svelte dashboard with a grid for weather and suggestions. Define interfaces. Test grid rendering." <br> **Sample Output**: <br> ```svelte<br><!-- src/components/Dashboard.svelte --><br><script lang="ts"><br>  import type { WeatherData } from '../stores/weather';<br>  export let weather: WeatherData | null;<br></script><br><div class="grid gap-4 md:grid-cols-2 p-4"><br>  <section class="bg-white p-4 rounded shadow"><br>    <slot name="weather" /><br>  </section><br>  <section class="bg-white p-4 rounded shadow"><br>    <slot name="suggestions" /><br>  </section><br></div><br>```<br>```typescript<br>// tests/Dashboard.test.ts<br>import { render, screen } from '@testing-library/svelte';<br>import Dashboard from '../src/components/Dashboard.svelte';<br>describe('Dashboard', () => {<br>  it('renders grid layout', () => {<br>    render(Dashboard, { weather: null });<br>    expect(document.querySelector('.grid')).toBeInTheDocument();<br>  });<br>});<br>``` | [ ] |
| 9 | **City Search Bar** | Add a TypeScript Svelte city search bar to the dashboard using Open-Meteo’s geocoding API for autocomplete. Define interfaces. Sanitize inputs, use Tailwind CSS for styling with a dropdown. Write Vitest tests for search functionality. | Type-safe search bar with autocomplete, secure, tested. | **Example Prompt**: "Create a TypeScript Svelte search bar with Open-Meteo geocoding. Define interfaces. Test city selection." <br> **Sample Output**: <br> ```svelte<br><!-- src/components/SearchBar.svelte --><br><script lang="ts"><br>  import { createEventDispatcher } from 'svelte';<br>  const dispatch = createEventDispatcher<{ select: { name: string; latitude: number; longitude: number } }>();<br>  let query: string = '';<br>  let results: { name: string; latitude: number; longitude: number }[] = [];<br>  async function search() {<br>    if (!query) return;<br>    const url = `https://geocoding-api.open-meteo.com/v1/search?name=${encodeURIComponent(query)}`;<br>    const res = await fetch(url);<br>    const data: { results: typeof results } = await res.json();<br>    results = data.results || [];<br>  }<br></script><br><input<br>  type="text"<br>  bind:value={query}<br>  on:input={search}<br>  class="p-2 border rounded w-full"<br>  placeholder="Search city"<br>><br><ul class="bg-white shadow"><br>  {#each results as city}<br>    <li on:click={() => dispatch('select', city)}>{city.name}</li><br>  {/each}<br></ul><br>```<br>```typescript<br>// tests/SearchBar.test.ts<br>import { render, screen, fireEvent } from '@testing-library/svelte';<br>import SearchBar from '../src/components/SearchBar.svelte';<br>describe('SearchBar', () => {<br>  it('displays search results', async () => {<br>    global.fetch = jest.fn().mockResolvedValue({<br>      json: () => ({ results: [{ name: 'Berlin', latitude: 52.52, longitude: 13.41 }] })<br>    });<br>    render(SearchBar);<br>    await fireEvent.input(screen.getByPlaceholderText('Search city'), { target: { value: 'Berlin' } });<br>    expect(screen.getByText('Berlin')).toBeInTheDocument();<br>  });<br>});<br>``` | [ ] |
| 10 | **Suggestion Filters** | Implement a TypeScript Svelte component for toggle buttons to filter suggestions (wardrobe, activities, food, exercises). Define interfaces. Use Tailwind CSS for styling, ensure accessibility. Write Vitest tests for filter toggling. | Type-safe toggle buttons for suggestions, accessible, tested. | **Example Prompt**: "Create a TypeScript Svelte component for suggestion filters. Define interfaces. Test toggle functionality." <br> **Sample Output**: <br> ```svelte<br><!-- src/components/Filters.svelte --><br><script lang="ts"><br>  export let activeFilters: Record<string, boolean>;<br>  const toggleFilter = (type: string) => {<br>    activeFilters[type] = !activeFilters[type];<br>  };<br></script><br><div class="flex gap-2"><br>  {#each ['wardrobe', 'activities', 'food', 'exercises'] as type}<br>    <button<br>      class="p-2 rounded {activeFilters[type] ? 'bg-blue-600 text-white' : 'bg-gray-200'}"<br>      on:click={() => toggleFilter(type)}<br>      aria-pressed={activeFilters[type]}<br>    >{type}</button><br>  {/each}<br></div><br>```<br>```typescript<br>// tests/Filters.test.ts<br>import { render, screen, fireEvent } from '@testing-library/svelte';<br>import Filters from '../src/components/Filters.svelte';<br>describe('Filters', () => {<br>  it('toggles filter', async () => {<br>    render(Filters, { activeFilters: { wardrobe: false } });<br>    await fireEvent.click(screen.getByText('wardrobe'));<br>    expect(screen.getByText('wardrobe')).toHaveAttribute('aria-pressed', 'true');<br>  });<br>});<br>``` | [ ] |
| 11 | **Weather Icons** | Integrate animated weather icons in the TypeScript Svelte weather display using the latest Skycons or Tailwind CSS animations, ensuring Svelte compatibility. Define interfaces. Write Vitest tests for icon rendering. | Type-safe animated weather icons, tested. | **Example Prompt**: "Create a TypeScript Svelte component for animated weather icons. Define interfaces. Test sun icon rendering." <br> **Sample Output**: <br> ```svelte<br><!-- src/components/WeatherIcon.svelte --><br><script lang="ts"><br>  export let condition: string;<br>  interface IconStyles {<br>    [key: string]: string;<br>  }<br>  const icons: IconStyles = { clear: 'animate-spin text-yellow-500' };<br></script><br><span class={`inline-block w-8 h-8 ${icons[condition] || ''}`}>☀️</span><br>```<br>```typescript<br>// tests/WeatherIcon.test.ts<br>import { render, screen } from '@testing-library/svelte';<br>import WeatherIcon from '../src/components/WeatherIcon.svelte';<br>describe('WeatherIcon', () => {<br>  it('renders sun icon for clear', () => {<br>    render(WeatherIcon, { condition: 'clear' });<br>    expect(screen.getByText('☀️')).toHaveClass('text-yellow-500');<br>  });<br>});<br>``` | [ ] |
| 12 | **Store Last City** | Create a TypeScript Svelte store to save the last searched city (latitude, longitude, name) in localStorage with secure JSON serialization. Define interfaces. Write Vitest tests for persistence. | Type-safe store persisting city, tested, secure. | **Example Prompt**: "Create a TypeScript Svelte store to save city in localStorage. Define interfaces. Test persistence." <br> **Sample Output**: <br> ```typescript<br>// src/stores/city.ts<br>import { writable } from 'svelte/store';<br>interface City {<br>  name: string;<br>  latitude: number;<br>  longitude: number;<br>}<br>export const city = writable<City>(JSON.parse(localStorage.getItem('city') || '{}'));<br>city.subscribe((value) => {<br>  localStorage.setItem('city', JSON.stringify(value));<br>});<br>```<br>```typescript<br>// tests/city.test.ts<br>import { city } from '../src/stores/city';<br>import { get } from 'svelte/store';<br>describe('City Store', () => {<br>  it('persists city', () => {<br>    city.set({ name: 'Berlin', latitude: 52.52, longitude: 13.41 });<br>    expect(JSON.parse(localStorage.getItem('city')!).name).toBe('Berlin');<br>  });<br>});<br>``` | [ ] |
| 13 | **Cache Weather Data** | Implement a TypeScript Svelte store to cache Open-Meteo weather data in localStorage for offline access. Define interfaces. Refresh data when online; show fallback UI. Write Vitest tests for caching. | Type-safe store caching weather data, tested, secure. | **Example Prompt**: "Create a TypeScript Svelte store to cache weather data. Define interfaces. Test offline access." <br> **Sample Output**: <br> ```typescript<br>// src/stores/weatherCache.ts<br>import { writable } from 'svelte/store';<br>interface WeatherData {<br>  current_weather: { temperature: number };<br>}<br>export const weatherCache = writable<WeatherData>(JSON.parse(localStorage.getItem('weather') || '{}'));<br>weatherCache.subscribe((value) => {<br>  localStorage.setItem('weather', JSON.stringify(value));<br>});<br>```<br>```typescript<br>// tests/weatherCache.test.ts<br>import { weatherCache } from '../src/stores/weatherCache';<br>import { get } from 'svelte/store';<br>describe('WeatherCache', () => {<br>  it('caches weather data', () => {<br>    weatherCache.set({ current_weather: { temperature: 20 } });<br>    expect(JSON.parse(localStorage.getItem('weather')!).current_weather.temperature).toBe(20);<br>  });<br>});<br>``` | [ ] |
| 14 | **Light/Dark Mode** | Add a TypeScript Svelte light/dark mode toggle, storing preference in localStorage. Define interfaces. Use latest Tailwind CSS dark mode classes. Write Vitest tests for toggling. | Type-safe toggle for light/dark mode, tested, secure. | **Example Prompt**: "Create a TypeScript Svelte component for dark mode toggle. Define interfaces. Test dark mode class." <br> **Sample Output**: <br> ```svelte<br><!-- src/components/ThemeToggle.svelte --><br><script lang="ts"><br>  let isDark: boolean = localStorage.getItem('theme') === 'dark';<br>  $: document.documentElement.classList.toggle('dark', isDark);<br>  $: localStorage.setItem('theme', isDark ? 'dark' : 'light');<br></script><br><button<br>  on:click={() => (isDark = !isDark)}<br>  class="p-2 bg-gray-200 dark:bg-gray-800 rounded"<br>>Toggle Theme</button><br>```<br>```typescript<br>// tests/ThemeToggle.test.ts<br>import { render, screen, fireEvent } from '@testing-library/svelte';<br>import ThemeToggle from '../src/components/ThemeToggle.svelte';<br>describe('ThemeToggle', () => {<br>  it('toggles dark mode', async () => {<br>    render(ThemeToggle);<br>    await fireEvent.click(screen.getByText('Toggle Theme'));<br>    expect(document.documentElement.classList.contains('dark')).toBe(true);<br>  });<br>});<br>``` | [ ] |
| 15 | **Weather Alerts** | Create a TypeScript Svelte component to display alerts for extreme conditions (e.g., precipitation > 10 mm/h, wind speed > 50 km/h) based on Open-Meteo data. Define interfaces. Use Tailwind CSS for a dismissible banner. Write Vitest tests for alerts. | Type-safe alert banner for extreme weather, tested, secure. | **Example Prompt**: "Create a TypeScript Svelte component for weather alerts. Define interfaces. Test alert for heavy rain." <br> **Sample Output**: <br> ```svelte<br><!-- src/components/Alerts.svelte --><br><script lang="ts"><br>  import type { WeatherData } from '../stores/weather';<br>  export let weather: WeatherData | null;<br>  let show: boolean = !!weather?.current_weather?.precipitation && weather.current_weather.precipitation > 10;<br></script><br>{#if show}<br>  <div class="p-4 bg-red-600 text-white rounded flex justify-between"><br>    <span>Heavy Rain Alert!</span><br>    <button on:click={() => (show = false)}>Dismiss</button><br>  </div><br>{/if}<br>```<br>```typescript<br>// tests/Alerts.test.ts<br>import { render, screen } from '@testing-library/svelte';<br>import Alerts from '../src/components/Alerts.svelte';<br>describe('Alerts', () => {<br>  it('